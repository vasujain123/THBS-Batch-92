https://teams.microsoft.com/dl/launcher/launcher.html?url=%2F_%23%2Fl%2Fmeetup-join%2F19%3Ameeting_YzVhMDFhNGItMjViMi00MzQ4LTlmODAtYThmYWE5MWExYjU4%40thread.v2%2F0%3Fcontext%3D%257b%2522Tid%2522%253a%252239d5b779-8b24-4e1d-b86d-94df66abc1e6%2522%252c%2522Oid%2522%253a%252203f5c4bd-912f-425d-87c5-df1cb52a189a%2522%257d%26anon%3Dtrue&type=meetup-join&deeplinkId=3291b756-1c1f-4c68-807c-e683b07e2845&directDl=true&msLaunch=true&enableMobilePage=true&suppressPrompt=true

Software Development models:
------------------------------
Water fall model
V-model
Agile
spiral
prototype 
Capability Maturity Model
iterative model
RAD model
----------------------------------------------
Water Fall Model:
====================
-> Classical life cycle and liner sequential model.
-> One of the oldest and is widely used.
-> Suggests a systematic sequential approach from the requirement analysis.

Phases of waterfall model:
---------------------------
1. Requirement Analysis:
	
--> The goals and containts of the system to be developed are estabilished in consultation with system users.
--> They are then defined in details and serve a System Specification

2. System and software design:

--> Partitions the requirements to either hardware or software.
--> Software design involves identification of necessary fundamentals of thw software requirement.

3. Implementation:

--> During this stage the whole of software components are integrated as a set of programs or programming unit.

4. Unit Testing:

--> Involves verifying that each unit meets its necessary requirement or specification.

5. Integration and System testing:

--> The individual program units  are integrated and tested as a one complete system 
     to ensure that all the necessary requirements have been met.

6. Operation and Maintance:

-> Longest life cycle phase
-> The system which has been delivered is put to the practicle use.
-> Involves correcting the encountered errors which ere not discovered at earlier stages
-> Also by enhancing the system as new requirements are discovered.

-> Requirement analysis(SRS) 
	-> Design(ER Diagram, DFD, Activity Diagram) 
		-> Implementation (FS, User story) 
			-> Testing (Test Cases) 
				-> Maintance
========================================================================
Advantage:
-----------
-> Easy to understand and implement
-> widely used and known
-> Reinforce good habit: define before design.
-> Identifies deliverables and milestone
-> Documents driven
-> Works well on  and weak teams.

Disadvantage:
--------------
-> Does not reflect iterative nature.
-> delays discovery of errors.
-> one phase has to be completed before moving to the next phase.
-> Difficult and expansive to make changes to document.

===================================================================================
when to use?
----------------
-> Requirements are very well known
-> product definition is stable.
-> New version of existing product.
-> Porting our product to new platforms.
------------------------------------------------------------------------------------
Prototype Model:
------------------
-> It is an effective  paradigm for software engineering.
-> Generally in this model, developers listen to the customer, design a prototype model and finally test it.
-> This is repeated until all requirements of system are identified.

Advantages:
---------------
-> Users are actively involved in the development.
-> Errors can be detected much earlier
-> Quicker user feedback is available.
-> Missing functionalities can be identified easily.

Drawbacks:
------------
-> Leads to implementing and then repairing way of building system.
-> Incomplete problem analysis.

When to use:
------------
-> requirements are unstable and have to be clarified
-> short-lived demonstration.
-> new original developed.

----------------------------------------------------
Iterative model:
------------------

Agile Model:
------------

----------------------------------------------------------------------------
Type of testing:
-----------------------

Unit testing -> Integration testing -> System Testing -> Acceptance testing.


Black Box Testing
White Box tetsing
Regression testing
Smoke testing
Alpha Testing
Beta Testing
System testing
Stress Testing
Performance Testing

-------------------------------------------------------------
User Story -> It is the documnent  prepared by the developer for tester.
--------------

Suppose as a developer I completed 3 task:
	1. Login fuctionality using email and password. (BMS-234) -> (BMS-234-userStory.docx)
	2. Post some data(product, medicine, service) from UI to DB.
	3. Getting data from DB and will display at UI side.

Now you want to release above task in QA environment.

For 3 tasks/functionalities we have to create 3 user stories.
--------------------------------------------------------------
Format:
===============

1. Story No.(provided by Jira) along with its description

2. Scenarios:
		a. scenario 1
		b. scenario 2
		----
		----
		---
3. Any negative scenario
	NA

4. Affected Module

5. Performance impact
	NA

====================================================================================
GIT commands:
--------------
1. Check git version	
	> git --version
	
2. To initiate a blank repository(local)
	> git init

3. To check the status of your repository
	> git status
	
4. How to add files from working directory to git repository
	> git add <fileName>
			OR
	> git add . (all new files in the working directory to Stagging area)

5. Commit the added files (stage rea to repository)
	> git commit -m "relavant message"

->  git config user.email "coolshad12@gmail.com"
->  git config user.name "Jshadab"

6. How to check all previous commits
	> git log OR > git log --oneline

===============================================================================
How to create a branch in git:
----------------------------------
$ git branch develop


How to list all branch names:
---------------------------------
$ git branch
  develop
* main

How to switch a branch:
---------------------------------
$ git checkout develop
Switched to branch 'develop'

--------------------------------------------------------------------------------
SQL:
==========
1. mysql> show schemas; // Display all available databases(schemas) inside the DBMS.
2. mysql> use <dbName>; // Now user will enter in to the database.
3. mysql> show tables;  // Display all available tables(relations) inside the Database.
4. mysql> create table <tbl_name> (id, name VARCHAR(50), age, salary); // Create table without PK
4. mysql> create table <tbl_name> (id INT, name VARCHAR(50), age int, salary DOUBLE,  PRIMARY KEY (id)); // Create table with PK
5. mysql> INSERT INTO emp  (name, age, salary) VALUES ('Sapna', 23, 2345.0); // Insert values into the Table
6. mysql> SELECT * FROM emp;
8. mysql> SELECT * FROM emp WHERE id=2;
9. mysql> SELECT salary FROM emp WHERE NAME='Shadab';


Table:
------------
Product
	1. name
	2. category
	3. price
	4. quantity
	5. expiry_date
	6. discount
	7. id -> PK -> auto_increment
	
create table product (
id INT, 
name VARCHAR(50), 
category VARCHAR(50), 
price DOUBLE,
quantity INT,
expiry_date DATE,
discount DOUBLE,  PRIMARY KEY (id));

INSERT INTO product (name, category, price, quantity, expiry_date, discount)
	VALUES('iPhone 13 Mini', 'Electronics', 49999, 5, CURDATE()-1, 10);
	
	
	1. Find Distinc category.
	2. Maximum discount
	3. price for mi ultra note Book?
	
	SELECT * FROM product WHERE category LIKE '%Fash%';
	

SELECT * FROM product ORDER BY price DESC;


================================================================================
SELECT customers.CustomerID, customers.CustomerName, customers.ContactName, customers.Country, orders.OrderDate
FROM orders INNER JOIN customers WHERE customers.CustomerID = orders.CustomerID;

SELECT customers.CustomerID, customers.CustomerName, customers.ContactName, customers.Country, orders.OrderDate
FROM customers INNER JOIN orders WHERE customers.CustomerID = orders.CustomerID;

SELECT customers.CustomerID, customers.CustomerName, customers.ContactName, customers.Country, orders.OrderDate
FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID;

SELECT customers.CustomerID, customers.CustomerName, customers.ContactName, customers.Country, orders.OrderDate
FROM orders LEFT JOIN customers ON customers.CustomerID = orders.CustomerID;

SELECT customers.CustomerID, customers.CustomerName, customers.ContactName, customers.Country, orders.OrderDate
FROM orders RIGHT JOIN customers ON customers.CustomerID = orders.CustomerID;

---------------------------------------------------------------------------------------
Design database for Train Ticket Reservation System:
------------------------------------------------------
1. Train:
-----------
number INT
name VARCHAR
source VARCHAR
destination VARCHAR
fare DOUBLE

2. Paasenger:
---------------
id INT
name VARCHAR
contact VARCHAR
gender VARCHAR
age INT
---------------------------

3. Ticket:
-------------
id INT
train_id INT
paasenger_id INT  # Single paasenger only
travel_date Date
pnr VARCHAR
total_fare Double

-----------------------------------------------------------------
How to use mongodb using cmd line?
------------------------------------
we need to check whether we have mongodb intalled or not?

First we need to enter into MONGO shell
> mongo

Now we are in mongo shell.

1. show All DBs
> show dbs

2. how to create new DATABASE or SWITCHED into existing DB.
> use <db_name>

3. How to know currently used databse name?
> db

4. How to get all collection from a DB?
> show collections

5. How to create a new collection into the DB.
> db.createCollection("Laptop");

6. how to create a documnet in a collection(INSERT).
> db.<Collection_Name>.insert({"brand":"HP", "processor":"i3", "ram":"8GB"});

7. How to get document from a collection
> db.Laptop.find();
> db.Laptop.find().pretty();

{
        "brand" : "iPhone",
        "color" : "blue",
        "price" : "89,999"
},
{
        
        "brand" : "Samsung J7",
        "color" : "grey",
        "price" : "11,999"
       
},
{
        
        "brand" : "Oppo",
        "color" : "Sea Green",
        "price" : "14,999",
}

----------------------------------------------------------------
db.Mobile.insert({"brand" : "iPhone1", "color" : "blue", "price" : "89,999"})

db.Mobile.insertMany([{"brand" : "iPhone1", "color" : "blue", "price" : "89,999"},{"brand" : "iPhone2", "color" : "blue", "price" : "89,999"},{"brand" : "iPhone3", "color" : "blue", "price" : "89,999"}])

==========================================================
How to drop a collection?
> db.<Collection_Name>.drop()

How to delete a document:
---------------------------
> db.<Collection_Name>.remove({"ram":"8GB"})
--------------------------------------------------------------------------------------------------
IDE -> Integrated Development Environment -> Compiler + Runtime(JVM)+ lib + HELP
JDK -> Java Development Kit (Compiler + JVM) -> Developer
JRE -> Java Runtime Environment (JVM) -> Client


What is Java?
--------------
1. Java is a programming language.
2. Java is a platform
3. Java Is Technology
	a. JavaSE (Standard Edition) -> Standalone app/ Desktop application
	b. JavaEE (Enterprise Edition) -> Web Application 
	c. JavaME (Micro Edition) -> Mobile devices
---------------------------------------------------------------------------------------------------	
Why Java?
-------------
1. OOP language
-----------------------
2. Platform Independent
3. secure
4. Robust
5. Internalization(I18N) support




Data Types In java:
---------------------------
Primitive Data Types:
----------------------
boolean

char

byte
short
int
long

float
double

Reference Data Types:
----------------------
Class
Interface
array
enum
annotation
==================================================================
C/C++ uses ASCII-8 bits encoding scheme. 2 power 6 => 256

Java uses Unicode -16 Bits encoding scheme -> 2 power 16 -> ----------

-------------------------------------------------------------------------------
Class
Object
Inheritance
Polymorphism
Encapsulation
Data Absraction

-----------------------------------------------------------
Class:
-------
1. Class is an imaginary thing (or blueprint) which describe the properties(variable) 
	and behaviours(functions) of the real world objects
2. Class is representation of similar kind of objects.
3. Class is an user defined data type.

Syntax for creating a class in Java?
----------------------------------------

<modifier> class <name> <extends> <implements>
	{
		//body of class
	}

e.g.:
--------
 class Animal
	{
		// members
			a. static
			b. instance
	}

member:
------------
1. variable(s)
2. method(s)
3. constructor(s)
4. initializer block(s)
5. inner class(es)

public class Car
{
	int h;
	int w;
static	float wc;
	
	void move(){}	
static	void avg(){}

}

==========================================================================
static members are associated with class or classname.

instance members are associated with Objects.

---------------------------------------------------------------------

variable-> name of memory location


== =============================================================
How to create object for a Car class:
========================================

1. Object is a real world enity
2. Object is an instance of a class.




Syntax:
-----------
				<type>	<var> =	new <type>(<parameter)
				
Example:
------------
		Car c1 = new Car();
		Car c2 = new Car();
		
Accessing members:
------------------------
1. <ClassName>.<member>  // Only static members
2. <ObjRef>.<member> //  instance as well as static members
3. <member>
==========================================

	Car.wc = 50; //OK
	
	c2.w = 20; //OK
	c1.h = 15; //OK
	
---------------------------------

		Car.h = 99; // trying to access inastance member using class name.-> Compile Time error
		
		c1.wc = 100; //trying to access static member using Obj Ref. -> OK but not recommended.
		
The main method:
-----------------------

	public static void main(String[] shad) 
		{
		
		}	
		
1. Called By JVM, which is an external entity hence declred public.
2. declared as static so JVM can call it directly with the class name. 
	otherwise JVM will hce to create an object for that class which is an unnecessary task.
3. main method will not return any value to is caller i.e. JVM.
4. main is just a method name nothing else.

public class Test1 {

	void m1() {
	}

	static void m2() {
	}

	void m3() {

		Test1.m2(); // using class name

		Test1 obj = new Test1();
		obj.m1(); // using object reference

	}
}


--------------------------------------------------------
Conditional statements:
=================================
1. 	if(<BoolExpr>)
		{
			//body
		}

2. if(<BoolExpr>)
		{
			//body
		}
	else
		{
			// Body
		}
		
3. if(<BoolExpr>)
		{
			//body
		}
	else if(<BoolExpr>)
		{
			//body
		}
	else
		{
			// Body
		}		
		
====================================================================

 int a =10;
 
 if(a = 15)
	{
	SOP("Hi");
	}
  else
	{
	SOP("Bye");
	}
=======================
Output:-> COmpile Time error
---------------------------------
 int a =10;
 
 if(a == 15)
	{
	SOP("Hi");
	}
  else
	{
	SOP("Bye");
	}

Output:-> Bye
=================================================================================
===================================================================================

Printing in Java:
------------------
System.out.print(data); -> data

 

System.out.println(data); -> data + \n (new line)

 

Example:
-------------
  int i =10;
  
SOP(i); // 10 -> value of variable
SOP('i'); // i -> i is a char value
SOP("i"); // i -> i is a string value
SOP(10); // 10 -> 10 as  an int value
SOP("10"); // 10 -> 10 as a string value
SOP(2 * 5); // 10 -> 10 is evaluated value.

 

--------------------------------------------------------------------
 class A
 {
    ------
    -----
    static B v2;
    ----
    ------
 }
-------------------------
 class B
    {
        void foo(){}
    }
--------------------------
B v1 = new B();
v1.foo();
------------------
 A.v2.foo();
System.out.println();
=====================================================================
Operators:
--------------
1. Arithmetice Operators
2. Reltional Operators
3. Eqaulity operators
4. String Concatenation
5. Variable increment/decrement
6. Logical
7. Ternary.
======================================================
1. Arithmetice Operators
    +, -, *, /, %

 

example:
----------
    int a = 10;
    int b = 3;
    
    int c = a + b ; // 13 
    int d = a - b ; // 7
    int e = a * b ; // 30
    int f = a / b ; // 3
    int g = a % b ; // 1

 

Extended Assignment operators:
===================================
 a = a + b ; ==> a += b;
 a = a - b ; ==> a -= b;
 a = a * b ; ==> a *= b;
 a = a / b ; ==> a /= b;
 a = a % b ; ==> a %= b;

 

-------------------------------------
Emample:
------------------

 

byte -> short -> int -> long -> float -> double

 

    int i =10;
    float f = 2.3F;
    double d = 10.0;
    
double    x = (i + f) * d;  // MAX(int, int, float, double )
 
--------------------------------

 

    byte b = 10;
    short s= 15;
    
int    y = b + s; //// MAX(int, byte, short )

 

----------------------------------------------------------------------
2. Relational Operators
    <, >, <=, >=

 

operands: numeric values
result : boolean

 

Example:
-----------
    int x =15;
    
    boolean b = 10 < x < 20 ; //  true < 20 => C.E.

 


3. Eqaulity operators
    ==, !=
    
operands: all type
result : boolean

 

    int i =10;
    boolean b1 = i == 15; //false
            b1 = b1 == false;  // true

 


Car c1 = new Car();
Car c2 = new Car();

 

    boolean b2 = c1 == c2; //  false
    
=========================================================================
4. String Concatenation ('+')
----------------------------------------
    String s ="I love ";
    String s2 = "JAVA";
    
    String s3 = s1 + s2; // "I love JAVA"
    
String    x = "20" + 10; // ==> "20" + "10" ==> "2010"

 

=================================================================
5. Variable increment/decrement
-------------------------------------

 

    ++ /--
    
    pre/post

 

                int x =10;
     int y = ++x;// 11   | int y = x++; // 10
    
------------------------------------
    int i = ++5; // C.E.
    SOP(i); // ---

 

======================================================================

 

6. Logical operator:
--------------------------
 &, |, ^, !

 

A & B = A.B
A | B = A + B

 

        -        -
A ^ B = A.B + A.B  => if both are same -> false otherwise true

 

operands: boolean expr
result : boolean

 

Example:
--------------
    int x =15;
    
    boolean b = (10 > x) & (x < 20) ; // false & true => false

 

========================================================================
    boolean b = (10 > x) && (x < 20) ; //false && (Not evaluated) => false

 

  x = sqrt(Sin-1(log(57385 * 5753))) * 0 // 0
-------------------------------------------
7. Ternary.

 

  <boolExpr> ? <expr1> : <expr2>
  
Exmple:
------------
int a = ------;
int b = ------;
int c = ------;

 

int max;
    
    if(a>b)
    {
        max = a;
    }
    else{
     max = b;
    }

 

SOP(max);

 

-----------------------------------------------

 

int a = ------;
int b = ------;

 

int max = a > b ? a : b;
SOP(max);

 

-------------------------------------------
Array:
-----------
-> Array is a linear Data Structure.
-> Arrays stores similar kind of data/elements
-> In java arrays are Objects
-> Array are fixed in size.
-> Array are indexed and index starting from 0.
-> In Java, array have an elemnet named length which contain size of an array.
-> If we will use an invalid index we will get an exception(java.lang.ArrayIndexOutOfBoundsException)

 

Syntax:
-------------
    <type>[] <var> = new <type>[ <size> ];
    <type>[] <var> = {<values>};

 

Example:
----------
        int[] arr = new int[3];

 

        arr[0] = 99;
        arr[1] = 45;
        arr[2] = 78;

 

        int[] arr2 = { 3, 13, 23 , 78, 45, 39};

 

    
    String[] names= new String[5];

 

---------------------------------------

 

function/method:
-----------------
syntax :
--------------
<modifier> <returnType> <name>(<parameters>) <throws>
{
    //body
}

 

Example:
------------
 void foo()
    {
    }

 

=====================================
Method overloding:
----------------------

 

In a java class we dont have duplicate methods( same name and same parameters).

 

But in a java class we have 2 or more than 2 methods having same name but different parameter list.
    this process is called method overloadinga nd mehods called overloaded methods
    
If name are same, then it should be different:
    1. number of parameters
    2. data type
    3. order of parameter

 

-> There is no impact of return type in method overloading

 

------------------------------------------------------------------------
Constructor:
--------------
-> Constructors are special members of a class. they are similar to the methods.

 

-> it is used to construct initial state of an object.

 

-> Rules for creating constructor:
    Name of constructor must be same as name of its class
    only access modifier is permissible
    no return type even void

 


-> Every Java class must have atleast one constructor.
-> If developer not created a constructor,
    compiler will insert a default constructor with same accessbility of that class





		
		
		
		
		
		
		
		

























